"""This module gathers tools to build and use training exercises"""

import chess
from .. import models


def get_node_coverage():
    """Return a dictionnary where keys are node UIDs and values inform whether
       the node is included in an exercise, as white or as black.
    """
    coverage = {
        node.uid: {chess.WHITE: False, chess.BLACK: False}
        for node in models.Node.objects.all()
    }
    for position in models.PositionTraining.objects.all():
        for ancestor in position.node_leaf.ancestors():
            coverage[ancestor.uid][position.exercise.first_move] = True
    return coverage


def look_for_trainable_nodes():
    """Select all leaves from the node tree that are worth training"""
    selection = list()
    for node in models.Node.objects.all():
        if not (node.is_leaf() or node.is_pre_leaf()):
            continue
        if node.is_good_position(not node.turn(), -.1):
            selection.append(node)
    return selection


def build_exercise_to(node):
    """Build a sequence of moves from the starting chess position to the
       given node. Moves of the node's color asked after the returned 'root'
       node are the bests according to the repertoire.
    """
    moves = list()
    color = node.turn()
    root = None
    for ancestor in node.ancestors():
        if ancestor.turn() == color and root is None:
            if ancestor.is_best_move(not color):
                moves.insert(0, "1 " + ancestor.move_uci())
            else:
                moves.insert(0, "0 " + ancestor.move_uci())
                root = ancestor
        else:
            moves.insert(0, "0 " + ancestor.move_uci())
    return root, moves


def build_trainable_exercises():
    """Selects and build appropriate exercises from to learn the repertoire.
    """
    plan = {"exercises": list(), "trainings": list()}
    root = models.Node.objects.filter(parent=None).get()
    eid_offset = 1
    if models.Exercise.objects.exists():
        eid_offset += models.Exercise.objects.latest("id").id
    for i, node_leaf in enumerate(look_for_trainable_nodes()):
        node_root, moves = build_exercise_to(node_leaf)
        if node_root is None:
            node_root = root
        if node_root.uid == node_leaf.uid:
            eid_offset -= 1
            continue
        eid = i + eid_offset
        plan["exercises"].append(models.Exercise(
            id=eid,
            title="Openy Ex#%d" % (len(plan["exercises"]) + 1),
            description="This exercise was generated by the Openy trainer.",
            starting_position="rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1",
            cover_position=node_leaf.fen,
            moves=",".join(moves),
            first_move=not node_leaf.turn(),
        ))
        plan["trainings"].append(models.PositionTraining(
            exercise_id=eid,
            node_leaf=node_leaf,
            node_root=node_root,
        ))
    models.Exercise.objects.bulk_create(plan["exercises"])
    models.PositionTraining.objects.bulk_create(plan["trainings"])
